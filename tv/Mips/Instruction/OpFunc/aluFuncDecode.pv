`ifndef MIPS_INSTRUCTION_OPFUNC_ALUFUNCDECODE_I
`define MIPS_INSTRUCTION_OPFUNC_ALUFUNCDECODE_I

`include "Mips/Alu/Func.v"
`include "Mips/Instruction/OpFunc/OpFunc.v"
`include "Mips/Instruction/OpFunc/OpFuncs.v"

module Mips_Instruction_OpFunc_aluFuncDecode
	( `Mips_Instruction_OpFunc_OpFunc_T(input) opFunc
	, `Mips_Alu_Func_T(output) func
	);

`Mips_Alu_Func_T(reg) func\$;
assign func = func\$;

always @ (*)
	case(opFunc)
$py(ops = r"""
Add       Add
Addi      Add
Addiu     Add
Addu      Add
And       And
Andi      And
Lui       Add
Nor       Nor
Or        Or
Ori       Or
Slt       Slts
Slti      Slts
Sltiu     Sltu
Sltu      Sltu
Sub       Sub
Subu      Sub
Xor       Xor
Xori      Xor
Sll       Sll
Sllv      Sll
Sra       Sra
Srav      Sra
Srl       Srl
Srlv      Srl
Div       Divs
Divu      Divu
Mfhi      Mfhi
Mflo      Mflo
Mthi      Mthi
Mtlo      Mtlo
Mult      Muls
Multu     Mulu
Beq       Sub
Bgez      None
Bgezal    None
Bgtz      None
Blez      None
Bltz      None
Bltzal    None
Bne       Sub
Break     None
Syscall   None
J         None
Jal       None
Jalr      None
Jr        None
Mfc0      None
Mtc0      None
Lb        Add
Lbu       Add
Lh        Add
Lhu       Add
Lw        Add
Sb        Add
Sh        Add
Sw        Add
Nop       None
""".strip().splitlines())
$for(op in ops)
$py(op, func = map(lambda x: x.strip(), op.strip().split()))
		`Mips_Instruction_OpFunc_OpFuncs_$(op) : func\$ = `Mips_Alu_Func_$(func) ;
$endfor
		default : func\$ = `Mips_Alu_Func_None ;
	endcase

endmodule

`endif
