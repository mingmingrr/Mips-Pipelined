`include "Mips/Control/Control.v"
`include "Mips/Type/Word.v"

`include "Mips/Instruction/Format/RFormat.v"
`include "Mips/Instruction/Format/IFormat.v"
`include "Mips/Instruction/Category/Category.v"
`include "Mips/Instruction/Category/categorize.v"
`include "Mips/Instruction/OpFunc/OpFunc.v"
`include "Mips/Instruction/OpFunc/decode.v"

$for(i in "Pc Alu Memory Register".split(' '))
`include "Mips/Control/Signal/$(i)/generate.v"
$endfor

module Mips_Control_generate
	( `Mips_Type_Word_T (input) instruction
	, `Mips_Control_Control_T (output) control
	);

`Mips_Instruction_OpFunc_OpFunc_T (wire) opFunc;
Mips_Instruction_OpFunc_decode OPFUNC
	( .op     (`Mips_Instruction_Format_RFormat_Op(instruction))
	, .func   (`Mips_Instruction_Format_RFormat_Func(instruction))
	, .opFunc (opFunc)
	);

`Mips_Instruction_Category_Category_T(wire) category;
Mips_Instruction_Category_categorize CATAGORY
	( .opFunc   (opFunc)
	, .branchOp (`Mips_Instruction_Format_RFormat_Rt(instruction))
	, .category (category)
	);

$for(i in "Pc Alu Memory Register".split(' '))
`Mips_Control_Control_$(i)_T (wire) $(i[0].lower() + i[1:]);
Mips_Control_Signal_$(i)_generate $(i.upper())
	( .opFunc   (opFunc)
	, .category (category)
	, .control  ($(i[0].lower() + i[1:]))
	);
$endfor

assign control = `Mips_Control_Control_Pack_Defaults;

endmodule


